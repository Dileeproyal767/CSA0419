#include <stdio.h>
#define NUM PROCESSES 4
#define NUM RESOURCES 3
int main() 
{
    int claim[NUM PROCESSES][NUM RESOURCES] = {{3, 2, 2}, {6, 1, 3}, {3, 1, 4}, {4, 2, 2}};
    int allocation[NUM PROCESSES][NUM RESOURCES] = {{1, 0, 0}, {6, 1, 2}, {2, 1, 1}, {0, 0, 2}};
    int available[NUM RESOURCES] = {9, 3, 6};
    int work[NUM RESOURCES];
    int finish[NUM PROCESSES] = {0};
    int safeSequence[NUM PROCESSES];
    int numSafe = 0;
    for (int i = 0; i < NUM RESOURCES; i++)
    {
        work[i] = available[i];
    }
    while (numSafe < NUM PROCESSES)
    {
        int found = 0;
        for (int i = 0; i < NUM PROCESSES; i++)
        {
            if (!finish[i])
            {
                int j;
                for (j = 0; j < NUM RESOURCES; j++)
                {
                    if (claim[i][j] - allocation[i][j] > work[j]) 
                    {
                        break;
                    }
                }
                if (j == NUM RESOURCES) 
                {
                    for (j = 0; j < NUM RESOURCES; j++)
                    {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = 1;
                    safeSequence[numSafe] = i;
                    numSafe++;
                    found = 1;
                }
            }
        }
        if (!found) 
        {
            printf("unsafe state\n");
            return 0;
        }
    }
    printf("Safe state, safe sequence: ");
    for (int i = 0; i < NUM PROCESSES; i++)
    {
        printf("%d ", safeSequence[i]);
    }
    printf("\n");
    return 0;
}
