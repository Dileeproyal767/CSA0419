#include <stdio.h>
#include <stdbool.h>
#define NUM PROCESSES 3
#define NUM RESOURCES 3
int max matrix[NUM PROCESSES][NUM RESOURCES] = {{3, 6, 8}, {4, 3, 3}, {3, 4, 4}};
int allocation matrix[NUM PROCESSES][NUM RESOURCES] = {{3, 3, 3}, {2, 0, 3}, {1, 2, 4}};
int available resources[NUM RESOURCES] = {1, 2, 0};
bool finished[NUM PROCESSES] = {false};
bool is safe()
{
    int work[NUM RESOURCES];
    for (int i = 0; i < NUM RESOURCES; i++)
    {
        work[i] = available resources[i];
    }
    bool can finish = true;
    while (can finish)
    {
        can finish = false;
        for (int i = 0; i < NUM PROCESSES; i++)
        {
            if (!finished[i])
            {
                bool can allocate = true;
                for (int j = 0; j < NUM RESOURCES; j++)
                {
                    if (max matrix[i][j] - allocation matrix[i][j] > work[j]) 
                    {
                        can allocate = false;
                        break;
                    }
                }
                if (can allocate)
                {
                    for (int j = 0; j < NUM RESOURCES; j++)
                    {
                        work[j] += allocation matrix[i][j];
                    }
                    finished[i] = true;
                    can finish = true;
                }
            }
        }
    }

    for (int i = 0; i < NUM PROCESSES; i++)
    {
        if (!finished[i])
        {
            return false;
        }
    }

    return true;
}

int main()
{
    bool deadlock detected = true;
    while (deadlock detected)
    {
        deadlock detected = false;
        for (int i = 0; i < NUM PROCESSES; i++)
        {
            bool can allocate = true;
            for (int j = 0; j < NUM RESOURCES; j++)
            {
                if (max matrix[i][j] - allocation matrix[i][j] > available resources[j])
                {
                    can allocate = false;
                    break;
                }
            }
            if (can allocate && !finished[i])
            {
                for (int j = 0; j < NUM RESOURCES; j++)
                {
                    available resources[j] += allocation_matrix[i][j];
                }
                finished[i] = true;
                deadlock detected = false;
            }
        }
    }
    bool is system safe = is safe();
    if (!is system safe) 
    {
        printf("Deadlock detected.\n");
        printf("Deadlocked processes: ");
        for (int i = 0; i < NUM PROCESSES; i++)
        {
            if (!finished[i])
            {
                printf("P%d ", i + 1);
            }
        }
        printf("\n");
    } else 
    {
        printf("No deadlock detected.\n");
    }
    return 0;
}
